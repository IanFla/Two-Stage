samples_1stage[n_comp_vec[,8],1:d_ahead]<-y_comp_pred(nt,NULL,samples_1stage_pars[n_comp_vec[,8],],H_T[n_comp_vec[,8]],d_ahead,VaR_hat_adj[2],T,4)
comp_dens_tmp<-y_comp_pred(NULL,samples_1stage[truncnorm_vec[[2]],d_ahead:1],samples_1stage_pars[truncnorm_vec[[2]],],H_T[truncnorm_vec[[2]]],d_ahead,VaR_hat_adj[1],F,1:4)
comp_dens[truncnorm_vec[[2]],1:6]<-cbind(comp_dens_tmp[,1:2],comp_dens_tmp)*cbind(samples_1stage_pars_normdens[truncnorm_vec[[2]]],samples_1stage_pars_normdens[truncnorm_vec[[2]]],samples_1stage_pars_tdens[truncnorm_vec[[2]]],samples_1stage_pars_tdens[truncnorm_vec[[2]]],samples_1stage_pars_normdens[truncnorm_vec[[2]]],samples_1stage_pars_normdens[truncnorm_vec[[2]]])
target_dens[truncnorm_vec[[2]]]<-comp_dens_tmp[,1]*partial_targ_dens_1stage[truncnorm_vec[[2]]]*pars_targ_dens_1stage[truncnorm_vec[[2]]]
comp_dens_tmp<-y_comp_pred(NULL,samples_1stage[,d_ahead:1],samples_1stage_pars,H_T,d_ahead,VaR_hat_adj[2],F,3:4)
comp_dens[,7:8]<-comp_dens_tmp*cbind(samples_1stage_pars_normdens,samples_1stage_pars_normdens)
g_dens<-t(comp_dens[,-1]-comp_dens[,1]%*%t(rep(1,numb_comp-1)))
if(is_stage1==T){
ui_optim<-rbind(rep(-1,numb_comp-1),diag(rep(1,numb_comp-1)))
ci_optim<-c(-1,rep(0,numb_q1-1),rep(delta_lowbound_qt,numb_q1),rep(0,numb_q1*length(rhos)))
if(d_ahead>1) cum_logreturn<-c(samples_1stage[,1:d_ahead]%*%rep(1,d_ahead))
if(d_ahead==1) cum_logreturn<-samples_1stage[,1]
for(i in 1:length(rhos)) h_all[,i]<-(cum_logreturn<=VaR_hat[i])*1
gamma_vec<-rep(1,numb_comp)/numb_comp
gamma_vec_excludefirst<-gamma_vec[-1]
q_gamma<-comp_dens%*%gamma_vec
var_scale<-var_MLE(gamma_vec_excludefirst,target_dens,t(comp_dens),h_all,rhos,q_gamma,g_dens,1)
theta_hat_results<-constrOptim(theta=gamma_vec_excludefirst,f=var_MLE,grad=var_MLE_gradient,method="BFGS",ui=ui_optim,ci=ci_optim,pi_dens=target_dens,q_dens=t(comp_dens),h_all=h_all,mu_hat_all=rhos,q_gamma=q_gamma,g_dens=g_dens,fnscale=var_scale,control=list(reltol=1e-05))
theta_excludefirst<-theta_hat_results$par
theta_hat<-c(1-sum(theta_excludefirst),theta_excludefirst)
alpha_sd=0
}
if(is_stage1==F){
theta_hat<-rep(1,numb_comp)/numb_comp
alpha_sd=0
}
return(list(theta_hat,VaR_hat,mu_comp,Sigma_comp,comp_dens,target_dens,g_dens,samples_1stage,n0,alpha_sd))
}
View(VaR_ARCH_stage1)
a=0
a[0]=1
a
a[1]-1
a
a[1]=1
a
a[2]=1
a
a[4]=11
a
a[-1]
y_comp_pred_allcomp<-function(n,y_future,sample_pars,mixprop,H_T,d_ahead,truncVaR,is_sampling){
n_comp<-c(n-sum(floor(mixprop[-1]*n)),floor(mixprop[-1]*n)); n_vec<-list(1:(n_comp[1]))
alpha0<-exp(sample_pars[,1]); alpha1<-abs(sample_pars[,2]); beta_par<-abs(sample_pars[,3])
for(i in 2:8){
if(n_comp[i]>0) n_vec[[i]]<-(sum(n_comp[1:(i-1)])+1):sum(n_comp[1:i])
if(n_comp[i]==0) n_vec[[i]]<-NULL
}
np<-sum(n_comp[c(1,3,5,7)]); nq<-sum(n_comp[c(2,4,6,8)])
np_vec<-unlist(n_vec[c(1,3,5,7)]); nq_vec<-unlist(n_vec[c(2,4,6,8)])
cum_logreturn<-rep(0,n)
if(is_sampling==T){
y_future<-matrix(0,n,d_ahead)
# Calculate H_T
H_current<-H_T
if(d_ahead>1){
for(k in 1:(d_ahead-1)){
y_future[,k]<-rnorm(n,sd=sqrt(H_current))
H_old<-H_current
H_current<-alpha0+alpha1*y_future[,k]^2+beta_par*H_old
infin_ind<-(1:n)[!is.finite(H_current)]
if(length(infin_ind)>0) H_current[infin_ind]<-max(H_current[-infin_ind])
}
if(d_ahead>2) cum_logreturn<-y_future[,1:(d_ahead-1)]%*%rep(1,d_ahead-1)
if(d_ahead==2) cum_logreturn<-y_future[,1]
}
infin_ind<-(1:n)[!is.finite(H_current)]
if(length(infin_ind)>0) H_current[infin_ind]<-max(H_current[-infin_ind])
std_H<-sqrt(H_current)
# Generate samples
y_last_mup<-rep(0,n); y_last_muq<-(-std_H)
n13<-n_comp[1]+n_comp[3]; n13_vec<-c(n_vec[[1]],n_vec[[3]])
n24<-n_comp[2]+n_comp[4]; n24_vec<-c(n_vec[[2]],n_vec[[4]])
n5<-n_comp[5]; if(n5>0) n5_vec<-n_vec[[5]]
n6<-n_comp[6]; if(n6>0) n6_vec<-n_vec[[6]]
n7<-n_comp[7]; if(n7>0) n7_vec<-n_vec[[7]]
n8<-n_comp[8]; if(n8>0) n8_vec<-n_vec[[8]]
if(n13>0) y_future[n13_vec,d_ahead]<-rnorm(n13,mean=0,sd=std_H[n13_vec])
if(n24>0) y_future[n24_vec,d_ahead]<-rnorm(n24,mean=y_last_muq[n24_vec],sd=std_H[n24_vec])
if(n5>0) y_future[n5_vec,d_ahead]<-rnorm_trunc(n5,0,std_H[n5_vec],truncVaR[1]-cum_logreturn[n5_vec])
if(n6>0) y_future[n6_vec,d_ahead]<-rnorm_trunc(n6,y_last_muq[n6_vec],std_H[n6_vec],truncVaR[1]-cum_logreturn[n6_vec])
if(n7>0) y_future[n7_vec,d_ahead]<-rnorm_trunc(n7,0,std_H[n7_vec],truncVaR[2]-cum_logreturn[n7_vec])
if(n8>0) y_future[n8_vec,d_ahead]<-rnorm_trunc(n8,y_last_muq[n8_vec],std_H[n8_vec],truncVaR[2]-cum_logreturn[n8_vec])
# Calculate densities
y_dens<-matrix(0,n,8); y_last<-y_future[,d_ahead]
y_last_bound1<-truncVaR[1]-cum_logreturn; y_last_bound2<-truncVaR[2]-cum_logreturn
y_dens[,c(1,3)]<-dnorm(y_last,y_last_mup,std_H)
y_dens[,c(2,4)]<-dnorm(y_last,y_last_muq,std_H)
nc_pVaR1<-pnorm(y_last_bound1,y_last_mup,std_H)
nc_qVaR1<-pnorm(y_last_bound1,y_last_muq,std_H)
y_dens[,5]<-dnorm(y_last,y_last_mup,std_H)/nc_pVaR1
y_dens[y_last>y_last_bound1,5]<-0
y_dens[,6]<-dnorm(y_last,y_last_muq,std_H)/nc_qVaR1
y_dens[y_last>y_last_bound1,6]<-0
nc_pVaR2<-pnorm(y_last_bound2,y_last_mup,std_H)
nc_qVaR2<-pnorm(y_last_bound2,y_last_muq,std_H)
y_dens[,7]<-dnorm(y_last,y_last_mup,std_H)/nc_pVaR2
y_dens[y_last>y_last_bound2,7]<-0
y_dens[,8]<-dnorm(y_last,y_last_muq,std_H)/nc_qVaR2
y_dens[y_last>y_last_bound2,8]<-0
return(list(y_future[,d_ahead:1],y_dens))
}
if(is_sampling==F){
# Calculate H_T
if(d_ahead==1) y_future<-matrix(y_future,ncol=1)
n<-dim(y_future)[1]
H_current<-H_T
if(d_ahead>1){
for(k in 1:(d_ahead-1)){
H_old<-H_current
H_current<-alpha0+alpha1*y_future[,k]^2+beta_par*H_old
infin_ind<-(1:n)[!is.finite(H_current)]
if(length(infin_ind)>0) H_current[infin_ind]<-max(H_current[-infin_ind])
}
if(d_ahead>2) cum_logreturn<-y_future[,1:(d_ahead-1)]%*%rep(1,d_ahead-1)
if(d_ahead==2) cum_logreturn<-y_future[,1]
}
infin_ind<-(1:n)[!is.finite(H_current)]
if(length(infin_ind)>0) H_current[infin_ind]<-max(H_current[-infin_ind])
std_H<-sqrt(H_current)
# Calculate densities
y_last_mup<-rep(0,n); y_last_muq<-(-std_H)
y_dens<-matrix(0,n,8); y_last<-y_future[,d_ahead]
y_last_bound1<-truncVaR[1]-cum_logreturn; y_last_bound2<-truncVaR[2]-cum_logreturn
y_dens[,c(1,3)]<-dnorm(y_last,y_last_mup,std_H)
y_dens[,c(2,4)]<-dnorm(y_last,y_last_muq,std_H)
nc_pVaR1<-pnorm(y_last_bound1,y_last_mup,std_H)
nc_qVaR1<-pnorm(y_last_bound1,y_last_muq,std_H)
y_dens[,5]<-dnorm(y_last,y_last_mup,std_H)/nc_pVaR1
y_dens[y_last>y_last_bound1,5]<-0
y_dens[,6]<-dnorm(y_last,y_last_muq,std_H)/nc_qVaR1
y_dens[y_last>y_last_bound1,6]<-0
nc_pVaR2<-pnorm(y_last_bound2,y_last_mup,std_H)
nc_qVaR2<-pnorm(y_last_bound2,y_last_muq,std_H)
y_dens[,7]<-dnorm(y_last,y_last_mup,std_H)/nc_pVaR2
y_dens[y_last>y_last_bound2,7]<-0
y_dens[,8]<-dnorm(y_last,y_last_muq,std_H)/nc_qVaR2
y_dens[y_last>y_last_bound2,8]<-0
return(y_dens)
}
}
View(y_comp_pred_allcomp)
list(1:(4))
pnorm
?rband
?rbind
m <- cbind(1, 1:7)
m
m <- cbind(m, 8:14)
m
MLE_mixture_p<-function(h_prop,g){
numb_g<-dim(g)[2]
minimizing_results<-trust(loglik_neg_trust,parinit=rep(0,numb_g),rinit=1,rmax=10,h_prop=h_prop,g_vec=g,iterlim = 10)
zeta_MLE<-minimizing_results$argument
return(zeta_MLE)
}
View(MLE_mixture_p)
?trust
loglik_neg_trust<-function(zeta,h_prop,g_vec){
# dens_all is n*p matrix, g_dens is n*(p-1) matrix
num_g<-dim(g_vec)[2]
q_alpha_zeta<-h_prop+g_vec%*%zeta
if(sum(q_alpha_zeta<0)>0) return(list(value=Inf,gradient=Inf,hessian=Inf))
l_funval<-sum(log(q_alpha_zeta))
temp<-g_vec/(q_alpha_zeta%*%t(rep(1,num_g)))
l_funval_der<-colSums(temp)
l_funval_hessian<--crossprod(temp)
return(list(value=-l_funval,gradient=-l_funval_der,hessian=-l_funval_hessian))
}
View(loglik_neg_trust)
?Reduce
add <- function(x) Reduce("+", x)
add(list(1, 2, 3))
cadd <- function(x) Reduce("+", x, accumulate = TRUE)
cadd(seq_len(7))
numb_comp=8
rbind(rep(-1,numb_comp-1),diag(rep(1,numb_comp-1)))
c(-1,rep(0,numb_q1-1),rep(delta_lowbound_qt,numb_q1),rep(0,numb_q1*length(rhos)))
numb_q1=2
c(-1,rep(0,numb_q1-1),rep(delta_lowbound_qt,numb_q1),rep(0,numb_q1*length(rhos)))
delta_lowbound_qt<-10^(-3)
c(-1,rep(0,numb_q1-1),rep(delta_lowbound_qt,numb_q1),rep(0,numb_q1*length(rhos)))
rhos<-c(.05,.01)
c(-1,rep(0,numb_q1-1),rep(delta_lowbound_qt,numb_q1),rep(0,numb_q1*length(rhos)))
var_MLE<-function(theta_excludefirst,pi_dens,q_dens,h_all,mu_hat_all,q_gamma,g_dens,fnscale){
# h is n0*length(rhos) matrix with each column being the indicator function of each VaR; mu_hat_all includse all rho for VaR; q_dens is numb_comp*n0 matrix; g_dens is numb_g*n matrix
numb_mu<-length(mu_hat_all)
var_MLE_part<-0
for(i in 1:numb_mu) var_MLE_part[i]<-partial_var_MLE_value(theta_excludefirst,pi_dens,q_dens,h_all[,i],mu_hat_all[i],q_gamma,g_dens)
var_MLE_value<-sum(var_MLE_part)/numb_mu
return(var_MLE_value/fnscale)
}
View(var_MLE)
partial_var_MLE_value<-function(theta_excludefirst,pi_dens,q_dens,h,mu_hat,q_gamma,g_dens){ #q_dens is numb_comp*n, g_dens is numb_g*n
if(sum(theta_excludefirst<0)>0||sum(theta_excludefirst)>0.999) return(Inf)
numb_g<-dim(g_dens)[1]
alpha_vec<-c(1-sum(theta_excludefirst),theta_excludefirst)
q_alpha<-t(alpha_vec)%*%q_dens
temp<-!(pi_dens==0)
pi_dens<-pi_dens[temp]
q_gamma<-q_gamma[temp]
g_dens<-g_dens[,temp]
q_alpha<-q_alpha[temp]
h<-h[temp]
#
cc1<-min(q_gamma)
q_gamma_temp<-q_gamma
q_gamma<-q_gamma/cc1
cc2<-median(pi_dens)
pi_dens_temp<-pi_dens
pi_dens<-pi_dens/cc2
#
f<-(h-mu_hat)*pi_dens
part1_beta<-g_dens/(rep(1,numb_g)%*%t(q_alpha))
part2_beta<-t(g_dens/(rep(1,numb_g)%*%t(q_gamma)))
B_inv<-solve(part1_beta%*%part2_beta)
#
part4_beta<-f/q_gamma
part5_beta<-part1_beta%*%part4_beta
beta_MLE<-B_inv%*%part5_beta
#
G<-g_dens
var_MLE_val<-mean(((f-c(t(beta_MLE)%*%G))/q_alpha)*((f-c(t(beta_MLE)%*%G))/q_gamma))
var_MLE_val<-var_MLE_val/cc1
return(var_MLE_val)
}
View(partial_var_MLE_value)
t(c(1,2,3))
View(var_MLE)
View(partial_var_MLE_value)
var_MLE_gradient<-function(theta_excludefirst,pi_dens,q_dens,h_all,mu_hat_all,q_gamma,g_dens,fnscale){
# h is n0*length(rhos) matrix with each column being the indicator function of each VaR; mu_hat_all includse all rho for VaR; q_dens is numb_comp*n0 matrix; g_dens is numb_g*n matrix
numb_mu<-length(mu_hat_all)
numb_comp<-8
var_MLE_gradient_part<-matrix(0,numb_comp-1,numb_mu)
for(i in 1:numb_mu) var_MLE_gradient_part[,i]<-partial_var_MLE_gradient(theta_excludefirst,pi_dens,q_dens,h_all[,i],mu_hat_all[i],q_gamma,g_dens)
var_MLE_gradient_value<-rowSums(var_MLE_gradient_part)/numb_mu
return(var_MLE_gradient_value/fnscale)
}
View(var_MLE_gradient)
partial_var_MLE_gradient<-function(theta_excludefirst,pi_dens,q_dens,h,mu_hat,q_gamma,g_dens){ # the form of g_dens has to be (q2-q1,q3-q1,...,q_p-q1)
if(sum(theta_excludefirst<0)>0||sum(theta_excludefirst)>0.999) return(Inf)
numb_g<-dim(g_dens)[1]
I_G1_1<-NULL
for(i in 1:numb_g) I_G1_1<-rbind(I_G1_1,diag(1,numb_g))
I_G1_2<-matrix(0,numb_g^2,numb_g)
for(i in 1:numb_g) I_G1_2[((i-1)*numb_g+1):(i*numb_g),i]<-rep(1,numb_g)
I_G2_1<-t(I_G1_1)
I_G2_2<-t(I_G1_2)
alpha_vec<-c(1-sum(theta_excludefirst),theta_excludefirst)
q_alpha<-t(alpha_vec)%*%q_dens
#temp<-!((pi_dens==0)&(q_alpha==0))
temp<-!(pi_dens==0)
pi_dens<-pi_dens[temp]
q_gamma<-q_gamma[temp]
g_dens<-g_dens[,temp]
q_alpha<-q_alpha[temp]
h<-h[temp]
n0<-length(pi_dens)
#
cc1<-min(q_gamma)
q_gamma_temp<-q_gamma
q_gamma<-q_gamma/cc1
cc2<-median(pi_dens)
pi_dens_temp<-pi_dens
pi_dens<-pi_dens/cc2
#
f<-(h-mu_hat)*pi_dens
part1_beta<-g_dens/(rep(1,numb_g)%*%t(q_alpha))
part2_beta<-t(g_dens/(rep(1,numb_g)%*%t(q_gamma)))
B_inv<-solve(part1_beta%*%part2_beta)
#
part4_beta<-f/q_gamma
part5_beta<-part1_beta%*%part4_beta
beta_MLE<-B_inv%*%part5_beta
#
G<-g_dens
tau1<-(f-c(t(beta_MLE)%*%G))/q_alpha/q_gamma
#
q_alpha2_gamma<-1/q_alpha^2/q_gamma #could be Inf
C<-part5_beta
B_inv_C_diag<-blockdiag(B_inv%*%C,numb_g)
G2<-(t(G)%*%I_G2_1)*(((q_alpha2_gamma%*%t(rep(1,numb_g)))*t(G))%*%I_G2_2)
G3<-((f*q_alpha2_gamma)%*%t(rep(1,numb_g)))*t(G)
#
B_p<--G%*%G2
C_p<--G%*%G3
#
beta_gradient<-t(-B_inv%*%B_p%*%B_inv_C_diag+B_inv%*%C_p)
var_gradient_part1<-G%*%(tau1^2*q_gamma)/n0
var_gradient_part2<-beta_gradient%*%(G*(rep(1,numb_g)%*%t(tau1)))%*%rep(1,n0)*2/n0
var_gradient<-as.vector(-var_gradient_part1-var_gradient_part2)
var_gradient<-var_gradient/cc1
return(var_gradient)
}
View(partial_var_MLE_gradient)
VaR_ARCH_twostage<-function(n,d_ahead,rhos,nt,y_hist,h_ini,a_pars,df_t){
stage1_results<-VaR_ARCH_stage1(rhos,d_ahead,nt,y_hist,h_ini,a_pars,df_t,T)
Time<-length(y_hist)-1
theta_hat<-stage1_results[[1]]
VaR_hat_stage1<-stage1_results[[2]]
VaR_hat_adj<-.8*VaR_hat_stage1
mu_comp<-stage1_results[[3]]
Sigma_comp<-stage1_results[[4]]
comp_dens_stage1<-stage1_results[[5]]
target_dens_stage1<-stage1_results[[6]]
g_dens_stage1<-t(stage1_results[[7]])
samples_stage1<-stage1_results[[8]]
n0<-stage1_results[[9]]
numb_q1<-2
dimension<-d_ahead+3
numb_comp<-numb_q1*(length(rhos)+2)
gamma_vec<-rep(1,numb_comp)/numb_comp
comp_ind_vec<-matrix(0,length(rhos)+2,numb_q1)
for(i in 1:(length(rhos)+2)) comp_ind_vec[i,]<-((i-1)*numb_q1+1):(i*numb_q1)
VaR_hat<-0
pars_hat<-rep(0,3)
# Stage2 sampling
samples_stage2<-matrix(0,n-n0,dimension)
comp_dens_stage2<-matrix(0,n-n0,numb_comp)
# Determine the sample sizes needed and corresponding mixture proportions for each mixture of numb_q1 components
n_comp<-0; theta_hat_comp<-matrix(0,length(rhos)+2,numb_q1)
for(i in 1:(length(rhos)+2)){
n_comp[i]<-floor((n-n0)*sum(theta_hat[comp_ind_vec[i,]]))
theta_hat_comp[i,]<-theta_hat[comp_ind_vec[i,]]
}
n_comp<-c(n-n0-sum(n_comp[-1]),n_comp[-1])
# Generate samples of parameters and calculate parameter part of target dens
samples_stage2_pars_norm<-rmvnorm(sum(n_comp[c(1,3,4)]),mu_comp,Sigma_comp)
samples_stage2_pars_t<-cbind(rmvt(sum(n_comp[2]),delta=mu_comp[1],sigma=matrix(Sigma_comp[1,1]),df=df_t,type = "shifted"),rmvt(sum(n_comp[2]),delta=mu_comp[2],sigma=matrix(Sigma_comp[2,2]),df=df_t,type = "shifted"),rmvt(sum(n_comp[2]),delta=mu_comp[3],sigma=matrix(Sigma_comp[3,3]),df=df_t,type = "shifted"))
samples_stage2_pars<-rbind(samples_stage2_pars_norm[1:(n_comp[1]),],samples_stage2_pars_t,samples_stage2_pars_norm[(sum(n_comp[1])+1):sum(n_comp[c(1,3,4)]),])
samples_stage2[,(d_ahead+1):(d_ahead+3)]<-samples_stage2_pars
samples_stage2_pars_normdens<-dmvnorm(samples_stage2_pars,mu_comp,Sigma_comp)
samples_stage2_pars_tdens<-dt((samples_stage2_pars[,1]-mu_comp[1])/sqrt(Sigma_comp[1,1]),df=df_t)*dt((samples_stage2_pars[,2]-mu_comp[2])/sqrt(Sigma_comp[2,2]),df=df_t)*dt((samples_stage2_pars[,3]-mu_comp[3])/sqrt(Sigma_comp[3,3]),df=df_t)/sqrt(Sigma_comp[1,1]*Sigma_comp[2,2]*Sigma_comp[3,3])
pars_targ_dens<-exp((samples_stage2[,d_ahead+1]-a_pars[1])^2/(-2*a_pars[2]^2))
# Calculate h_T and calculate h_1:T part of target dens
y2_hist<-y_hist^2
nonzero_ind<-(1:(n-n0))[as.logical(rowProds2(samples_stage2_pars[,2:3]>0)*(rowSums(samples_stage2_pars[,2:3])<1))]
n_nonzero<-length(nonzero_ind)
alpha0<-exp(samples_stage2_pars[,1]); alpha1<-abs(samples_stage2_pars[,2]); beta_par<-abs(samples_stage2_pars[,3])
partial_targ_dens_log_tmp<-rep(0,n-n0)
for(i in 1:Time){
if(i==1) H_current<-alpha0+alpha1*y_hist[1]^2+beta_par*h_ini
if(i>1) H_current<-alpha0+alpha1*Y_old+beta_par*H_old
Y_current<-y2_hist[i+1]
partial_targ_dens_log_tmp<-partial_targ_dens_log_tmp-.5*(Y_current/H_current+log(H_current))
H_old<-H_current
Y_old<-Y_current
}
H_T<-alpha0+alpha1*Y_old+beta_par*H_old
infin_ind<-(1:(n-n0))[!is.finite(H_T)]
if(length(infin_ind)>0) H_T[infin_ind]<-max(H_T[-infin_ind])
partial_targ_dens_log<-rep(-Inf,n-n0)
partial_targ_dens_log[nonzero_ind]<-partial_targ_dens_log_tmp[nonzero_ind]
partial_targ_dens<-exp(partial_targ_dens_log)
# Generate y_future and Calculate densities
sampling_results<-y_comp_pred_allcomp(n-n0,NULL,samples_stage2_pars,theta_hat,H_T,d_ahead,VaR_hat_adj,T)
samples_stage2[,1:d_ahead]<-sampling_results[[1]]
comp_dens_stage2<-sampling_results[[2]]*cbind(samples_stage2_pars_normdens,samples_stage2_pars_normdens,samples_stage2_pars_tdens,samples_stage2_pars_tdens,samples_stage2_pars_normdens,samples_stage2_pars_normdens,samples_stage2_pars_normdens,samples_stage2_pars_normdens)
# Calculate the MLE weights
g_dens_stage2<-comp_dens_stage2[,-1]-comp_dens_stage2[,1]%*%t(rep(1,numb_comp-1))
comp_dens<-rbind(comp_dens_stage1,comp_dens_stage2)
g_dens<-rbind(g_dens_stage1,g_dens_stage2)
theta_tilde<-n0/n*gamma_vec+(n-n0)/n*theta_hat
q_theta_tilde<-comp_dens%*%theta_tilde
NA_ind<-(1:n)[!is.finite(q_theta_tilde)]
if(length(NA_ind)>0) q_theta_tilde[NA_ind]<-0
zero_ind<-(1:n)[q_theta_tilde==0]
if(length(zero_ind)>0){
q_theta_tilde_adj<-q_theta_tilde[-zero_ind]
g_dens_adj<-g_dens[-zero_ind,]
}
if(length(zero_ind)==0){
q_theta_tilde_adj<-q_theta_tilde
g_dens_adj<-g_dens
}
zeta_MLE<-MLE_mixture_p(q_theta_tilde_adj,g_dens_adj)
# Calculate the samples weights
target_dens_stage2<-sampling_results[[2]][,1]*partial_targ_dens*pars_targ_dens
target_dens<-c(target_dens_stage1,target_dens_stage2)
if(length(zero_ind)>0) target_dens_adj<-target_dens[-zero_ind]
if(length(zero_ind)==0) target_dens_adj<-target_dens
weights_sample_MLE<-target_dens_adj/(q_theta_tilde_adj+g_dens_adj%*%zeta_MLE)
# Point estimate
samples_all<-rbind(samples_stage1,samples_stage2)
if(d_ahead>1) cum_logreturn<-c(samples_all[,1:d_ahead]%*%rep(1,d_ahead))
if(d_ahead==1) cum_logreturn<-samples_all[,1]
if(length(zero_ind)>0){
for(i in 1:length(rhos)) VaR_hat[i]<-VaR_ISest(cum_logreturn[-zero_ind],rhos[i],weights_sample_MLE)
for(k in 1:3) pars_hat[k]<-sum(samples_all[-zero_ind,d_ahead+k]*weights_sample_MLE)/sum(weights_sample_MLE)
}
if(length(zero_ind)==0){
for(i in 1:length(rhos)) VaR_hat[i]<-VaR_ISest(cum_logreturn,rhos[i],weights_sample_MLE)
for(k in 1:3) pars_hat[k]<-sum(samples_all[,d_ahead+k]*weights_sample_MLE)/sum(weights_sample_MLE)
}
return(list(VaR_hat,theta_hat,pars_hat,zeta_MLE,mu_comp,Sigma_comp,VaR_hat_stage1))
}
VaR_ARCH_onestage<-function(n,d_ahead,rhos,nt,y_hist,h_ini,a_pars,df_t){
stage1_results<-VaR_ARCH_stage1(rhos,d_ahead,nt,y_hist,h_ini,a_pars,df_t,F)
Time<-length(y_hist)-1
theta_hat<-stage1_results[[1]]
VaR_hat_stage1<-stage1_results[[2]]
VaR_hat_adj<-.8*VaR_hat_stage1
mu_comp<-stage1_results[[3]]
Sigma_comp<-stage1_results[[4]]
comp_dens_stage1<-stage1_results[[5]]
target_dens_stage1<-stage1_results[[6]]
g_dens_stage1<-t(stage1_results[[7]])
samples_stage1<-stage1_results[[8]]
n0<-stage1_results[[9]]
numb_q1<-2
dimension<-d_ahead+3
numb_comp<-numb_q1*(length(rhos)+2)
gamma_vec<-rep(1,numb_comp)/numb_comp
comp_ind_vec<-matrix(0,length(rhos)+2,numb_q1)
for(i in 1:(length(rhos)+2)) comp_ind_vec[i,]<-((i-1)*numb_q1+1):(i*numb_q1)
VaR_hat<-0
pars_hat<-rep(0,3)
# Stage2 sampling
samples_stage2<-matrix(0,n-n0,dimension)
comp_dens_stage2<-matrix(0,n-n0,numb_comp)
# Determine the sample sizes needed and corresponding mixture proportions for each mixture of numb_q1 components
n_comp<-0; theta_hat_comp<-matrix(0,length(rhos)+2,numb_q1)
for(i in 1:(length(rhos)+2)){
n_comp[i]<-floor((n-n0)*sum(theta_hat[comp_ind_vec[i,]]))
theta_hat_comp[i,]<-theta_hat[comp_ind_vec[i,]]
}
n_comp<-c(n-n0-sum(n_comp[-1]),n_comp[-1])
# Generate samples of parameters and calculate parameter part of target dens
samples_stage2_pars_norm<-rmvnorm(sum(n_comp[c(1,3,4)]),mu_comp,Sigma_comp)
samples_stage2_pars_t<-cbind(rmvt(sum(n_comp[2]),delta=mu_comp[1],sigma=matrix(Sigma_comp[1,1]),df=df_t,type = "shifted"),rmvt(sum(n_comp[2]),delta=mu_comp[2],sigma=matrix(Sigma_comp[2,2]),df=df_t,type = "shifted"),rmvt(sum(n_comp[2]),delta=mu_comp[3],sigma=matrix(Sigma_comp[3,3]),df=df_t,type = "shifted"))
samples_stage2_pars<-rbind(samples_stage2_pars_norm[1:(n_comp[1]),],samples_stage2_pars_t,samples_stage2_pars_norm[(sum(n_comp[1])+1):sum(n_comp[c(1,3,4)]),])
samples_stage2[,(d_ahead+1):(d_ahead+3)]<-samples_stage2_pars
samples_stage2_pars_normdens<-dmvnorm(samples_stage2_pars,mu_comp,Sigma_comp)
samples_stage2_pars_tdens<-dt((samples_stage2_pars[,1]-mu_comp[1])/sqrt(Sigma_comp[1,1]),df=df_t)*dt((samples_stage2_pars[,2]-mu_comp[2])/sqrt(Sigma_comp[2,2]),df=df_t)*dt((samples_stage2_pars[,3]-mu_comp[3])/sqrt(Sigma_comp[3,3]),df=df_t)/sqrt(Sigma_comp[1,1]*Sigma_comp[2,2]*Sigma_comp[3,3])
pars_targ_dens<-exp((samples_stage2[,d_ahead+1]-a_pars[1])^2/(-2*a_pars[2]^2))
# Calculate h_T and calculate h_1:T part of target dens
y2_hist<-y_hist^2
nonzero_ind<-(1:(n-n0))[as.logical(rowProds2(samples_stage2_pars[,2:3]>0)*(rowSums(samples_stage2_pars[,2:3])<1))]
n_nonzero<-length(nonzero_ind)
alpha0<-exp(samples_stage2_pars[,1]); alpha1<-abs(samples_stage2_pars[,2]); beta_par<-abs(samples_stage2_pars[,3])
partial_targ_dens_log_tmp<-rep(0,n-n0)
for(i in 1:Time){
if(i==1) H_current<-alpha0+alpha1*y_hist[1]^2+beta_par*h_ini
if(i>1) H_current<-alpha0+alpha1*Y_old+beta_par*H_old
Y_current<-y2_hist[i+1]
partial_targ_dens_log_tmp<-partial_targ_dens_log_tmp-.5*(Y_current/H_current+log(H_current))
H_old<-H_current
Y_old<-Y_current
}
H_T<-alpha0+alpha1*Y_old+beta_par*H_old
infin_ind<-(1:(n-n0))[!is.finite(H_T)]
if(length(infin_ind)>0) H_T[infin_ind]<-max(H_T[-infin_ind])
partial_targ_dens_log<-rep(-Inf,n-n0)
partial_targ_dens_log[nonzero_ind]<-partial_targ_dens_log_tmp[nonzero_ind]
partial_targ_dens<-exp(partial_targ_dens_log)
# Generate y_future and Calculate densities
sampling_results<-y_comp_pred_allcomp(n-n0,NULL,samples_stage2_pars,theta_hat,H_T,d_ahead,VaR_hat_adj,T)
samples_stage2[,1:d_ahead]<-sampling_results[[1]]
comp_dens_stage2<-sampling_results[[2]]*cbind(samples_stage2_pars_normdens,samples_stage2_pars_normdens,samples_stage2_pars_tdens,samples_stage2_pars_tdens,samples_stage2_pars_normdens,samples_stage2_pars_normdens,samples_stage2_pars_normdens,samples_stage2_pars_normdens)
# Calculate the MLE weights
g_dens_stage2<-comp_dens_stage2[,-1]-comp_dens_stage2[,1]%*%t(rep(1,numb_comp-1))
comp_dens<-rbind(comp_dens_stage1,comp_dens_stage2)
g_dens<-rbind(g_dens_stage1,g_dens_stage2)
theta_tilde<-n0/n*gamma_vec+(n-n0)/n*theta_hat
q_theta_tilde<-comp_dens%*%theta_tilde
NA_ind<-(1:n)[!is.finite(q_theta_tilde)]
if(length(NA_ind)>0) q_theta_tilde[NA_ind]<-0
zero_ind<-(1:n)[q_theta_tilde==0]
if(length(zero_ind)>0){
q_theta_tilde_adj<-q_theta_tilde[-zero_ind]
g_dens_adj<-g_dens[-zero_ind,]
}
if(length(zero_ind)==0){
q_theta_tilde_adj<-q_theta_tilde
g_dens_adj<-g_dens
}
zeta_MLE<-MLE_mixture_p(q_theta_tilde_adj,g_dens_adj)
#?# 为什么zeta不依赖target却能提高精度
# Calculate the samples weights
target_dens_stage2<-sampling_results[[2]][,1]*partial_targ_dens*pars_targ_dens
target_dens<-c(target_dens_stage1,target_dens_stage2)
if(length(zero_ind)>0) target_dens_adj<-target_dens[-zero_ind]
if(length(zero_ind)==0) target_dens_adj<-target_dens
weights_sample_MLE<-target_dens_adj/(q_theta_tilde_adj+g_dens_adj%*%zeta_MLE)
# Point estimate
samples_all<-rbind(samples_stage1,samples_stage2)
if(d_ahead>1) cum_logreturn<-c(samples_all[,1:d_ahead]%*%rep(1,d_ahead))
if(d_ahead==1) cum_logreturn<-samples_all[,1]
if(length(zero_ind)>0){
for(i in 1:length(rhos)) VaR_hat[i]<-VaR_ISest(cum_logreturn[-zero_ind],rhos[i],weights_sample_MLE)
for(k in 1:3) pars_hat[k]<-sum(samples_all[-zero_ind,d_ahead+k]*weights_sample_MLE)/sum(weights_sample_MLE)
}
if(length(zero_ind)==0){
for(i in 1:length(rhos)) VaR_hat[i]<-VaR_ISest(cum_logreturn,rhos[i],weights_sample_MLE)
for(k in 1:3) pars_hat[k]<-sum(samples_all[,d_ahead+k]*weights_sample_MLE)/sum(weights_sample_MLE)
#?# 对posterior pars mean进行estimation吗（自standarization）
}
#browser()
return(list(VaR_hat,theta_hat,pars_hat,zeta_MLE,mu_comp,Sigma_comp,VaR_hat_stage1))
}
View(VaR_ARCH_onestage)
View(VaR_ARCH_twostage)
#######################
# SP500 data
#######################
logindex_hist<-read.csv2("SP500.csv",sep=",",dec=".",header=T,colClasses=c("Date",NA))
length_hist<-dim(logindex_hist)[1]
logreturn_hist<-logindex_hist$VALUE[-1]-logindex_hist$VALUE[-length_hist]
y_hist<-100*logreturn_hist[2701:2900]
y_hist
View(logindex_hist)
